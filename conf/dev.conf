# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
application.secret="nfy;mx_ILxSl1l5pTB;d[o`AuujY3x2V;HldMS@?y42X9q?UmlpxCD19h0^pI12i"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
# ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=INFO
#Logger.javapns=INFO

#Spring configuration
spring.context.location="application-context.xml"


 cluster {
	seed-nodes = [
		"akka.tcp://RmsActorSystem@127.0.0.1:2551"]
		 auto-down-unreachable-after = 10s
 }

internal-threadpool-size=50

akka {
  loglevel = INFO  

  actor.provider = "akka.cluster.ClusterActorRefProvider"

  remote {
		log-remote-lifecycle-events = off
		netty.tcp {
			hostname = "127.0.0.1"
			port = 0
		}
   }

  cluster {
    roles = ["frontend"]
    auto-down = on
  }
  actor {
    default-dispatcher = {
     fork-join-executor {
           parallelism-min = 50
           parallelism-factor = 10.0
           parallelism-max = 100
        }
      }
   }
}

#play-akka.actor.default-dispatcher. Thread pool used for rest call, websocket creation

akka.actor.deployment {
	/apnsRouter {
			router = round-robin-pool
			nr-of-instances = 5
	}
	/gcmRouter {
			router = round-robin-pool
			nr-of-instances = 5
	}
	/eventRouter {
			router = round-robin-pool
			nr-of-instances = 5
	}
	/notificationRouter {
			router = round-robin-pool
			nr-of-instances = 5
	}
	/chatMessageRouter {
			router = round-robin-pool
			nr-of-instances = 5
	}
	/iqMessageRouter {
			router = round-robin-pool
			nr-of-instances = 5
	}
	/webBrowserRouter {
			router = round-robin-pool
			nr-of-instances = 5
	}
}
user-connection-actor-dispatcher-thread-pool { 
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {   
    core-pool-size-min = 50 
    core-pool-size-factor = 10.0   
    core-pool-size-max = 100
  }
  throughput = 5
}
# Min number of threads to cap factor-based parallelism number to
        #parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        #parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        #parallelism-max = 64

user-connection-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 800
    parallelism-factor = 100.0
    parallelism-max = 1000
  }
  throughput = 5
}
gcm-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 8
    parallelism-factor = 3.0
    parallelism-max = 100
  }
  throughput = 5
}
apns-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 8
    parallelism-factor = 2.0
    parallelism-max = 100
  }
  throughput = 5
}
web-browser-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 8
    parallelism-factor = 3.0
    parallelism-max = 100
  }
  throughput = 5
}
event-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 8
    parallelism-factor = 2.0
    parallelism-max = 100
  }
  throughput = 5
}
#event-actor-dispatcher-fork-join {
 # type = Dispatcher
  #executor = "fork-join-executor"
  #fork-join-executor {
   # parallelism-min = 8
    #parallelism-factor = 2.0
   # parallelism-max = 100
  #}
  #throughput = 5
#}
notification-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 8
    parallelism-factor = 2.0
    parallelism-max = 100
  }
  throughput = 5
}

chat-message-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 800
    parallelism-factor = 100.0
    parallelism-max = 1000
  }
  throughput = 5
}

iq-message-actor-dispatcher-fork-join {
  type = Dispatcher
  executor = "fork-join-executor"
  fork-join-executor {
    parallelism-min = 800
    parallelism-factor = 100.0
    parallelism-max = 1000
  }
  throughput = 5
}

